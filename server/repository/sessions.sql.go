// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
insert into sessions (id,user_id, expires_at) 
values ($1,$2, $3)
returning id, user_id, expires_at
`

type CreateSessionParams struct {
	ID        string           `db:"id" json:"id"`
	UserID    int32            `db:"user_id" json:"user_id"`
	ExpiresAt pgtype.Timestamp `db:"expires_at" json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.ID, arg.UserID, arg.ExpiresAt)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.ExpiresAt)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
delete from sessions where id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
select sessions.id, sessions.user_id, sessions.expires_at, users.id, users.username, users.password, users.created_at from sessions 
inner join users on users.id = sessions.user_id where sessions.id = $1
`

type GetSessionRow struct {
	Session Session `db:"session" json:"session"`
	User    User    `db:"user" json:"user"`
}

func (q *Queries) GetSession(ctx context.Context, id string) (GetSessionRow, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i GetSessionRow
	err := row.Scan(
		&i.Session.ID,
		&i.Session.UserID,
		&i.Session.ExpiresAt,
		&i.User.ID,
		&i.User.Username,
		&i.User.Password,
		&i.User.CreatedAt,
	)
	return i, err
}

const updateSessionExpiresAt = `-- name: UpdateSessionExpiresAt :exec
update sessions set expires_at =  $1  where id = $2
`

type UpdateSessionExpiresAtParams struct {
	ExpiresAt pgtype.Timestamp `db:"expires_at" json:"expires_at"`
	ID        string           `db:"id" json:"id"`
}

func (q *Queries) UpdateSessionExpiresAt(ctx context.Context, arg UpdateSessionExpiresAtParams) error {
	_, err := q.db.Exec(ctx, updateSessionExpiresAt, arg.ExpiresAt, arg.ID)
	return err
}
